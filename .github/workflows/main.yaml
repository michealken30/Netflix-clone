name: Test and Build

on:
  push:
    branches:
      - main
    paths:
      - "**/*"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # Needed to access git tags

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install dependencies
        run: npm install

      - name: Docker Setup
        uses: docker/setup-buildx-action@v2

      - name: Docker Credentials
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Get Latest Tag & Bump Minor Version
        id: versioning
        run: |
          git fetch --tags
          LATEST_TAG=$(git tag --sort=-v:refname | head -n 1)
          echo "Latest tag: $LATEST_TAG"

          if [[ "$LATEST_TAG" =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            MAJOR=${BASH_REMATCH[1]}
            MINOR=${BASH_REMATCH[2]}
            # Increment minor and reset patch
            MINOR=$((MINOR + 1))
            PATCH=0
            NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
          else
            echo "No valid semver tag found. Using v1.0.0"
            NEW_VERSION="v1.0.0"
          fi

          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "New version will be: $NEW_VERSION"

      - name: Build Docker Image
        run: |
          docker build . -t michealken30/spotify-app:${{ env.NEW_VERSION }}

      - name: Push Docker Image
        run: |
          docker push michealken30/spotify-app:${{ env.NEW_VERSION }}

      - name: Create Git Tag for New Version
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"
          git tag ${{ env.NEW_VERSION }}
          git push origin ${{ env.NEW_VERSION }}

#
